#!/bin/bash
# APT Package Management Functions
# Description: Functions for managing APT packages and repositories
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../core/logging.sh"

# Default package installer (can be overridden)
INSTALLER="${INSTALLER:-apt}"

# Update package cache
# Returns: 0 on success, 1 on failure
update_package_cache() {
    log_info "Updating package cache..."

    if ! sudo "$INSTALLER" update; then
        log_error "Failed to update package cache"
        return 1
    fi

    log_success "Package cache updated"
    return 0
}

# Upgrade system packages
# Returns: 0 on success, 1 on failure
upgrade_packages() {
    log_info "Upgrading system packages..."

    if ! sudo "$INSTALLER" upgrade -y; then
        log_error "Failed to upgrade packages"
        return 1
    fi

    log_success "System packages upgraded"
    return 0
}

# Check if a package is installed
# Args: $1 - package name
# Returns: 0 if installed, 1 if not installed
check_package_installed() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        return 1
    fi

    if dpkg -l "$package" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Check if a package is available in repositories
# Args: $1 - package name
# Returns: 0 if available, 1 if not available
check_package_available() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        return 1
    fi

    if apt-cache show "$package" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Install a single package
# Args: $1 - package name
# Returns: 0 on success, 1 on failure
install_package() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        return 1
    fi

    log_debug "Installing package: $package"

    if ! sudo "$INSTALLER" install -y "$package"; then
        log_error "Failed to install package: $package"
        return 1
    fi

    log_debug "Package installed successfully: $package"
    return 0
}

# Install multiple packages
# Args: $@ - package names
# Returns: 0 on success, 1 on failure
install_packages() {
    local packages=("$@")

    if [[ ${#packages[@]} -eq 0 ]]; then
        log_error "At least one package name required"
        return 1
    fi

    log_info "Installing packages: ${packages[*]}"

    if ! sudo "$INSTALLER" install -y "${packages[@]}"; then
        log_error "Failed to install packages: ${packages[*]}"
        return 1
    fi

    log_success "Packages installed successfully: ${packages[*]}"
    return 0
}

# Remove a package
# Args: $1 - package name
# Returns: 0 on success, 1 on failure
remove_package() {
    local package="$1"

    if [[ -z "$package" ]]; then
        log_error "Package name required"
        return 1
    fi

    if ! check_package_installed "$package"; then
        log_info "Package not installed: $package"
        return 0
    fi

    log_info "Removing package: $package"

    if ! sudo "$INSTALLER" remove -y "$package"; then
        log_error "Failed to remove package: $package"
        return 1
    fi

    log_success "Package removed: $package"
    return 0
}

# Install a .deb file
# Args: $1 - path to .deb file
# Returns: 0 on success, 1 on failure
install_deb_file() {
    local deb_file="$1"

    if [[ -z "$deb_file" ]]; then
        log_error ".deb file path required"
        return 1
    fi

    if [[ ! -f "$deb_file" ]]; then
        log_error ".deb file not found: $deb_file"
        return 1
    fi

    log_info "Installing .deb file: $deb_file"

    # Note: Always use apt for .deb files (nala doesn't support local files)
    if ! sudo apt install -y "$deb_file"; then
        log_error "Failed to install .deb file: $deb_file"
        return 1
    fi

    log_success ".deb file installed: $deb_file"
    return 0
}

# Add APT repository
# Args:
#   $1 - repository line (e.g., "deb [signed-by=/etc/apt/keyrings/key.gpg] https://repo.example.com/ stable main")
#   $2 - sources file name (without .list extension)
# Returns: 0 on success, 1 on failure
add_repository() {
    local repo_line="$1"
    local sources_file="$2"

    if [[ -z "$repo_line" || -z "$sources_file" ]]; then
        log_error "Repository line and sources file name required"
        return 1
    fi

    local sources_path="/etc/apt/sources.list.d/${sources_file}.list"

    # Check if repository already exists
    if [[ -f "$sources_path" ]]; then
        log_info "Repository already configured: $sources_file"
        return 0
    fi

    log_info "Adding repository: $sources_file"

    # Create sources file
    if ! echo "$repo_line" | sudo tee "$sources_path" > /dev/null; then
        log_error "Failed to create sources file: $sources_path"
        return 1
    fi

    log_success "Repository added: $sources_file"
    return 0
}

# Add GPG key to keyring
# Args:
#   $1 - GPG key URL or file path
#   $2 - keyring file name (with .gpg extension)
# Returns: 0 on success, 1 on failure
add_gpg_key() {
    local key_source="$1"
    local keyring_name="$2"

    if [[ -z "$key_source" || -z "$keyring_name" ]]; then
        log_error "GPG key source and keyring name required"
        return 1
    fi

    local keyring_path="/etc/apt/keyrings/$keyring_name"

    # Check if keyring already exists
    if [[ -f "$keyring_path" ]]; then
        log_info "GPG keyring already exists: $keyring_name"
        return 0
    fi

    log_info "Adding GPG key: $keyring_name"

    # Create keyrings directory if it doesn't exist
    sudo mkdir -p /etc/apt/keyrings

    # Download and install key
    local temp_key="/tmp/temp_key.gpg"

    if [[ "$key_source" =~ ^https?:// ]]; then
        # Download from URL
        if ! wget -qO- "$key_source" | gpg --dearmor > "$temp_key"; then
            log_error "Failed to download and process GPG key from: $key_source"
            return 1
        fi
    else
        # Local file
        if [[ ! -f "$key_source" ]]; then
            log_error "GPG key file not found: $key_source"
            return 1
        fi

        if ! gpg --dearmor < "$key_source" > "$temp_key"; then
            log_error "Failed to process GPG key file: $key_source"
            return 1
        fi
    fi

    # Install keyring
    if ! sudo install -D -o root -g root -m 644 "$temp_key" "$keyring_path"; then
        log_error "Failed to install GPG keyring: $keyring_path"
        rm -f "$temp_key"
        return 1
    fi

    # Cleanup
    rm -f "$temp_key"

    log_success "GPG key added: $keyring_name"
    return 0
}

# Clean package cache
# Returns: 0 on success, 1 on failure
clean_package_cache() {
    log_info "Cleaning package cache..."

    if ! sudo apt clean; then
        log_error "Failed to clean package cache"
        return 1
    fi

    log_success "Package cache cleaned"
    return 0
}

# Autoremove unnecessary packages
# Returns: 0 on success, 1 on failure
autoremove_packages() {
    log_info "Removing unnecessary packages..."

    if ! sudo "$INSTALLER" autoremove -y; then
        log_error "Failed to autoremove packages"
        return 1
    fi

    log_success "Unnecessary packages removed"
    return 0
}
