#!/bin/bash
# Flatpak Management Functions
# Description: Functions for managing Flatpak applications and repositories
# Author: Generated by GitHub Copilot for# Desktop application installation with Flatpak preference (for optional apps only)
# Args:
#   $1 - Application name (for display)
#   $2 - Flatpak ID
#   $3 - APT package name (optional)
#   $4 - External .deb URL (optional)
# Returns: 0 on success, 1 on failure
# Note: This is only for optional desktop applications, required apps use APT only
install_optional_desktop_application() {WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../core/logging.sh"

# Check if Flatpak is installed and configured
# Returns: 0 if ready, 1 if needs setup
check_flatpak_ready() {
    if ! command -v flatpak &> /dev/null; then
        log_error "Flatpak not installed"
        return 1
    fi

    if ! flatpak remotes | grep -q flathub; then
        log_warning "Flathub repository not configured"
        return 1
    fi

    return 0
}

# Initialize Flatpak system
# Returns: 0 on success, 1 on failure
setup_flatpak() {
    log_info "Setting up Flatpak..."

    # Install Flatpak if not present
    if ! command -v flatpak &> /dev/null; then
        log_info "Installing Flatpak..."
        if ! apt install -y flatpak; then
            log_error "Failed to install Flatpak"
            return 1
        fi
    fi

    # Add Flathub repository
    if ! add_flathub; then
        log_error "Failed to add Flathub repository"
        return 1
    fi

    log_success "Flatpak setup completed"
    return 0
}

# Add Flathub repository
# Returns: 0 on success, 1 on failure
add_flathub() {
    log_info "Adding Flathub repository..."

    if flatpak remotes | grep -q flathub; then
        log_info "Flathub already configured"
        return 0
    fi

    if ! flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo; then
        log_error "Failed to add Flathub repository"
        return 1
    fi

    log_success "Flathub repository added"
    return 0
}

# Check if a Flatpak application is available on Flathub
# Args: $1 - Flatpak application ID
# Returns: 0 if available, 1 if not
check_flatpak_available() {
    local flatpak_id="$1"

    if [[ -z "$flatpak_id" ]]; then
        log_error "Flatpak ID required"
        return 1
    fi

    # Search for the application
    if flatpak search "$flatpak_id" | grep -q "$flatpak_id"; then
        return 0
    else
        log_debug "Flatpak app not found: $flatpak_id"
        return 1
    fi
}

# Install a Flatpak application
# Args: $1 - Flatpak application ID
# Returns: 0 on success, 1 on failure
install_flatpak_app() {
    local flatpak_id="$1"

    if [[ -z "$flatpak_id" ]]; then
        log_error "Flatpak ID required"
        return 1
    fi

    # Check if already installed
    if flatpak list | grep -q "$flatpak_id"; then
        log_info "Flatpak app already installed: $flatpak_id"
        return 0
    fi

    # Ensure Flatpak is ready
    if ! check_flatpak_ready; then
        if ! setup_flatpak; then
            log_error "Failed to setup Flatpak"
            return 1
        fi
    fi

    log_info "Installing Flatpak app: $flatpak_id"

    if ! flatpak install -y flathub "$flatpak_id"; then
        log_error "Failed to install Flatpak app: $flatpak_id"
        return 1
    fi

    log_success "Flatpak app installed: $flatpak_id"
    return 0
}

# Remove a Flatpak application
# Args: $1 - Flatpak application ID
# Returns: 0 on success, 1 on failure
remove_flatpak_app() {
    local flatpak_id="$1"

    if [[ -z "$flatpak_id" ]]; then
        log_error "Flatpak ID required"
        return 1
    fi

    if ! flatpak list | grep -q "$flatpak_id"; then
        log_info "Flatpak app not installed: $flatpak_id"
        return 0
    fi

    log_info "Removing Flatpak app: $flatpak_id"

    if ! flatpak uninstall -y "$flatpak_id"; then
        log_error "Failed to remove Flatpak app: $flatpak_id"
        return 1
    fi

    log_success "Flatpak app removed: $flatpak_id"
    return 0
}

# List installed Flatpak applications
# Returns: 0 on success
list_flatpak_apps() {
    log_info "Installed Flatpak applications:"
    flatpak list --app --columns=name,application,version
    return 0
}

# Desktop application installation with Flatpak preference
# Args:
#   $1 - Application name (for display)
#   $2 - Flatpak ID
#   $3 - APT package name (optional)
#   $4 - External .deb URL (optional)
# Returns: 0 on success, 1 on failure
install_desktop_application() {
    local app_name="$1"
    local flatpak_id="$2"
    local apt_package="${3:-}"
    local deb_url="${4:-}"

    if [[ -z "$app_name" || -z "$flatpak_id" ]]; then
        log_error "Application name and Flatpak ID required"
        return 1
    fi

    log_info "Installing $app_name..."

    # Try Flatpak first (preferred for desktop apps)
    if check_flatpak_available "$flatpak_id"; then
        if install_flatpak_app "$flatpak_id"; then
            log_success "$app_name installed via Flatpak"
            return 0
        fi
    fi

    # Fallback to APT package if provided
    if [[ -n "$apt_package" ]]; then
        log_info "Flatpak unavailable, trying APT package: $apt_package"
        source "$(dirname "$0")/apt.sh"
        if install_package "$apt_package"; then
            log_success "$app_name installed via APT"
            return 0
        fi
    fi

    # Last resort: external .deb file
    if [[ -n "$deb_url" ]]; then
        log_info "Package managers unavailable, trying external .deb"
        source "$(dirname "$0")/external.sh"
        if install_from_deb_url "$app_name" "$deb_url"; then
            log_success "$app_name installed from external source"
            return 0
        fi
    fi

    log_error "Failed to install $app_name through any method"
    return 1
}
