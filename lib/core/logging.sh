#!/bin/bash
# Logging Functions
# Description: Centralized logging system for Debian-WS
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Log levels
readonly LOG_DEBUG=0
readonly LOG_INFO=1
readonly LOG_WARNING=2
readonly LOG_ERROR=3
readonly LOG_SUCCESS=4

# Default log level (can be overridden by DEBIANWS_LOG_LEVEL)
CURRENT_LOG_LEVEL=${DEBIANWS_LOG_LEVEL:-$LOG_INFO}

# Get timestamp for logging
get_timestamp() {
    date '+%Y-%m-%d %H:%M:%S'
}

# Internal logging function
_log() {
    local level="$1"
    local color="$2"
    local prefix="$3"
    shift 3
    local message="$*"

    # Check if we should log this level
    if [[ $level -lt $CURRENT_LOG_LEVEL ]]; then
        return 0
    fi

    # Create log entry
    local timestamp
    timestamp=$(get_timestamp)

    # Output to stderr for errors, stdout for others
    if [[ $level -eq $LOG_ERROR ]]; then
        echo -e "${color}[${timestamp}] ${prefix}: ${message}${NC}" >&2
    else
        echo -e "${color}[${timestamp}] ${prefix}: ${message}${NC}"
    fi

    # Log to file if DEBIANWS_LOG_FILE is set
    if [[ -n "${DEBIANWS_LOG_FILE:-}" ]]; then
        echo "[${timestamp}] ${prefix}: ${message}" >> "$DEBIANWS_LOG_FILE"
    fi
}

# Debug messages (only shown when DEBUG=1 or LOG_LEVEL=0)
log_debug() {
    if [[ "${DEBUG:-0}" == "1" ]] || [[ $CURRENT_LOG_LEVEL -eq $LOG_DEBUG ]]; then
        _log $LOG_DEBUG "$PURPLE" "DEBUG" "$@"
    fi
}

# Informational messages
log_info() {
    _log $LOG_INFO "$BLUE" "INFO" "$@"
}

# Warning messages
log_warning() {
    _log $LOG_WARNING "$YELLOW" "WARNING" "$@"
}

# Error messages
log_error() {
    _log $LOG_ERROR "$RED" "ERROR" "$@"
}

# Success messages
log_success() {
    _log $LOG_SUCCESS "$GREEN" "SUCCESS" "$@"
}

# Progress indicator for long operations
log_progress() {
    local message="$1"
    echo -e "${CYAN}⏳ ${message}...${NC}"
}

# Simple banner for section headers
log_banner() {
    local message="$1"
    local length=${#message}
    local border=$(printf '=%.0s' $(seq 1 $((length + 4))))

    echo -e "${CYAN}${border}${NC}"
    echo -e "${CYAN}  ${message}  ${NC}"
    echo -e "${CYAN}${border}${NC}"
}

# Log a command execution
log_command() {
    local command="$1"
    log_debug "Executing: $command"
}

# Log file operations
log_file_operation() {
    local operation="$1"
    local file="$2"
    log_debug "File operation: $operation -> $file"
}

# Initialize logging
init_logging() {
    # Create log directory if specified
    if [[ -n "${DEBIANWS_LOG_FILE:-}" ]]; then
        local log_dir
        log_dir=$(dirname "$DEBIANWS_LOG_FILE")
        if [[ ! -d "$log_dir" ]]; then
            mkdir -p "$log_dir" || {
                log_warning "Failed to create log directory: $log_dir"
                unset DEBIANWS_LOG_FILE
            }
        fi

        # Start new log session
        echo "=== Debian-WS Log Session Started: $(get_timestamp) ===" >> "$DEBIANWS_LOG_FILE"
    fi

    # Set log level from environment
    case "${DEBIANWS_LOG_LEVEL:-info}" in
        debug|DEBUG|0) CURRENT_LOG_LEVEL=$LOG_DEBUG ;;
        info|INFO|1) CURRENT_LOG_LEVEL=$LOG_INFO ;;
        warning|WARNING|warn|WARN|2) CURRENT_LOG_LEVEL=$LOG_WARNING ;;
        error|ERROR|3) CURRENT_LOG_LEVEL=$LOG_ERROR ;;
        *) CURRENT_LOG_LEVEL=$LOG_INFO ;;
    esac

    log_debug "Logging initialized with level: $CURRENT_LOG_LEVEL"
}

# Cleanup logging
cleanup_logging() {
    if [[ -n "${DEBIANWS_LOG_FILE:-}" ]]; then
        echo "=== Debian-WS Log Session Ended: $(get_timestamp) ===" >> "$DEBIANWS_LOG_FILE"
    fi
}

# Trap to cleanup on exit
trap cleanup_logging EXIT

# Initialize logging when this file is sourced
init_logging
