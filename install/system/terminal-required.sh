#!/bin/bash
# Required Terminal Applications
# Description: Install essential terminal/CLI applications from Debian repositories and external sources
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required libraries
source "$(dirname "$0")/../../lib/core/logging.sh"
source "$(dirname "$0")/../../lib/core/common.sh"
source "$(dirname "$0")/../../lib/install/apt.sh"

# Install core terminal tools from APT
install_core_terminal_tools() {
    log_info "Installing core terminal tools..."

    local core_tools=(
        "curl"
        "git"
        "unzip"
        "wget"
        "tree"
        "bash-completion"
    )

    if ! install_with_retries "${core_tools[@]}"; then
        log_error "Failed to install core terminal tools"
        return 1
    fi

    log_success "Core terminal tools installed successfully"
    return 0
}

# Install Gum (interactive CLI tool) from GitHub releases
install_gum() {
    local app_name="Gum"
    local version="0.14.3"

    log_info "Installing $app_name..."

    # Check if already installed
    if command -v gum &> /dev/null; then
        log_info "$app_name already installed"
        return 0
    fi

    # Download and install from GitHub
    local temp_dir="/tmp"
    local deb_file="gum.deb"
    local download_url="https://github.com/charmbracelet/gum/releases/download/v${version}/gum_${version}_amd64.deb"

    cd "$temp_dir"

    log_info "Downloading $app_name v$version..."
    if ! wget -qO "$deb_file" "$download_url"; then
        log_error "Failed to download $app_name"
        cd -
        return 1
    fi

    log_info "Installing $app_name..."
    if ! sudo apt install -y --allow-downgrades "./$deb_file"; then
        log_error "Failed to install $app_name"
        rm -f "$deb_file"
        cd -
        return 1
    fi

    # Cleanup
    rm -f "$deb_file"
    cd -

    log_success "$app_name installed successfully"
    return 0
}

# Install Fastfetch (system info tool) from GitHub releases
install_fastfetch() {
    local app_name="Fastfetch"

    log_info "Installing $app_name..."

    # Check if already installed
    if command -v fastfetch &> /dev/null; then
        local version
        version=$(fastfetch --version 2>/dev/null | head -n 1)
        log_info "$app_name already installed: $version"
        return 0
    fi

    # Get latest release URL from GitHub API
    local temp_dir="/tmp"
    local deb_file="fastfetch.deb"

    cd "$temp_dir"

    log_info "Getting latest $app_name release..."
    local download_url
    download_url=$(curl -s https://api.github.com/repos/fastfetch-cli/fastfetch/releases/latest | grep browser_download_url | grep 'amd64.deb' | cut -d '"' -f 4 | head -n 1)

    if [[ -z "$download_url" ]]; then
        log_error "Could not find $app_name .deb for amd64"
        cd -
        return 1
    fi

    log_info "Downloading $app_name..."
    if ! wget -O "$deb_file" "$download_url"; then
        log_error "Failed to download $app_name"
        cd -
        return 1
    fi

    log_info "Installing $app_name..."
    if ! sudo apt install -y "./$deb_file"; then
        log_error "Failed to install $app_name"
        rm -f "$deb_file"
        cd -
        return 1
    fi

    # Cleanup
    rm -f "$deb_file"
    cd -

    # Configure fastfetch if not already configured
    setup_fastfetch_config

    log_success "$app_name installed successfully"
    return 0
}

# Setup fastfetch configuration
setup_fastfetch_config() {
    local config_dir="$HOME/.config/fastfetch"
    local config_file="$config_dir/config.jsonc"

    if [[ -f "$config_file" ]]; then
        log_info "Fastfetch configuration already exists"
        return 0
    fi

    log_info "Setting up fastfetch configuration..."

    # Create config directory
    mkdir -p "$config_dir"

    # Copy configuration from resources if available
    local source_config="$(dirname "$0")/../../resources/configs/fastfetch.jsonc"
    if [[ -f "$source_config" ]]; then
        cp "$source_config" "$config_file"
        log_info "Fastfetch configuration applied"
    else
        log_warning "Fastfetch config template not found, using default"
    fi
}

# Helper function for required application installation
install_required_application() {
    local app_name="$1"
    local package_name="$2"

    if check_package_installed "$package_name"; then
        log_info "$app_name already installed"
        return 0
    fi

    log_info "Installing required $app_name..."

    if ! install_package "$package_name"; then
        log_error "Failed to install required $app_name"
        return 1
    fi

    log_success "$app_name installed successfully"
    return 0
}

# Main installation function
install_terminal_required() {
    log_banner "Installing Required Terminal Applications"

    # Update package cache first
    update_package_cache

    # Install core tools
    if ! install_core_terminal_tools; then
        log_error "Failed to install core terminal tools"
        return 1
    fi

    # Install external tools
    if ! install_gum; then
        log_error "Failed to install Gum"
        return 1
    fi

    if ! install_fastfetch; then
        log_error "Failed to install Fastfetch"
        return 1
    fi

    log_success "All required terminal applications installed successfully"
    return 0
}

# Execute if run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_terminal_required "$@"
fi
