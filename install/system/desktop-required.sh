#!/bin/bash
# Desktop Required Applications Installation
# Description: Installs required desktop applications for Debian-WS
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../../lib/core/logging.sh"
source "$(dirname "$0")/../../lib/core/version.sh"
source "$(dirname "$0")/../../lib/install/apt.sh"

# Setup Flatpak for desktop environment
# Note: Required for desktop functionality even though we prefer APT
# Returns: 0 on success, 1 on failure
setup_flatpak_desktop() {
    log_info "Setting up Flatpak for desktop environment..."

    # Install flatpak and GNOME Software plugin
    local packages=(
        "flatpak"
        "gnome-software-plugin-flatpak"
    )

    # Validate package availability for Debian 13
    if ! validate_package_list "${packages[@]}"; then
        log_error "Flatpak packages are not available in Debian 13"
        return 1
    fi

    if ! install_packages "${packages[@]}"; then
        log_error "Failed to install Flatpak packages"
        return 1
    fi

    # Add Flathub repository
    log_info "Adding Flathub repository..."
    if ! sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo; then
        log_error "Failed to add Flathub repository"
        return 1
    fi

    log_success "Flatpak desktop environment setup complete"
    return 0
}

# Install GNOME desktop essentials
# Returns: 0 on success, 1 on failure
install_gnome_essentials() {
    log_info "Installing GNOME desktop essentials..."

    local packages=(
        "gnome-tweaks"
        "gnome-sushi"
        "gnome-shell-extensions"
        "chrome-gnome-shell"
    )

    # Validate package availability for Debian 13
    if ! validate_package_list "${packages[@]}"; then
        log_error "Some GNOME packages are not available in Debian 13"
        return 1
    fi

    if ! install_packages "${packages[@]}"; then
        log_error "Failed to install GNOME essentials"
        return 1
    fi

    log_success "GNOME desktop essentials installed"
    return 0
}

# Install Alacritty terminal emulator
# Returns: 0 on success, 1 on failure
install_alacritty() {
    log_info "Installing Alacritty terminal emulator..."

    # Check if already installed via APT
    if check_package_installed "alacritty"; then
        log_success "Alacritty already installed via APT"
        return 0
    fi

    # Check if available in APT repositories
    if check_package_available "alacritty"; then
        log_info "Installing Alacritty from APT repositories..."
        if install_package "alacritty"; then
            log_success "Alacritty installed from APT"
            return 0
        fi
    fi

    # Fallback to Flatpak if APT fails or not available
    log_info "Installing Alacritty from Flatpak..."
    if ! sudo flatpak install -y flathub io.alacritty.Alacritty; then
        log_error "Failed to install Alacritty from Flatpak"
        return 1
    fi

    log_success "Alacritty installed from Flatpak"
    return 0
}

# Install system fonts
# Returns: 0 on success, 1 on failure
install_system_fonts() {
    log_info "Installing system fonts..."

    # Create fonts directory
    local fonts_dir="$HOME/.local/share/fonts"
    mkdir -p "$fonts_dir"

    # Install Meslo Nerd Font
    log_info "Installing Meslo Nerd Font..."
    local temp_dir="/tmp/fonts-$$"
    mkdir -p "$temp_dir"

    cd "$temp_dir"

    # Download Meslo Nerd Font
    if ! wget -q "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Meslo.zip"; then
        log_error "Failed to download Meslo Nerd Font"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi

    # Extract and install
    if ! unzip -q Meslo.zip -d MesloFont; then
        log_error "Failed to extract Meslo Nerd Font"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi

    cp MesloFont/*.ttf "$fonts_dir/"

    # Install iA Writer Mono font
    log_info "Installing iA Writer Mono font..."
    if ! wget -q -O iafonts.zip "https://github.com/iaolo/iA-Fonts/archive/refs/heads/master.zip"; then
        log_error "Failed to download iA Writer Mono font"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi

    if ! unzip -q iafonts.zip -d iaFonts; then
        log_error "Failed to extract iA Writer Mono font"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi

    # Copy iA Writer Mono fonts (handle spaces in path)
    find iaFonts/iA-Fonts-master -name "iAWriterMonoS-*.ttf" -exec cp {} "$fonts_dir/" \;

    # Return to original directory and cleanup
    cd - > /dev/null
    rm -rf "$temp_dir"

    # Refresh font cache
    log_info "Refreshing font cache..."
    if ! fc-cache -f; then
        log_error "Failed to refresh font cache"
        return 1
    fi

    # Set default monospace font
    log_info "Setting default monospace font..."
    if ! gsettings set org.gnome.desktop.interface monospace-font-name "MesloLGS Nerd Font 10"; then
        log_warning "Failed to set default monospace font (may require GNOME session)"
    fi

    log_success "System fonts installed"
    return 0
}

# Install clipboard utilities
# Returns: 0 on success, 1 on failure
install_clipboard_utilities() {
    log_info "Installing clipboard utilities..."

    local packages=(
        "wl-clipboard"
        "xclip"
    )

    if ! install_packages "${packages[@]}"; then
        log_error "Failed to install clipboard utilities"
        return 1
    fi

    log_success "Clipboard utilities installed"
    return 0
}

# Install browser (Firefox ESR from Debian repositories)
# Returns: 0 on success, 1 on failure
install_browser() {
    log_info "Installing Firefox ESR browser..."

    local packages=(
        "firefox-esr"
        "firefox-esr-l10n-en-gb"
    )

    if ! install_packages "${packages[@]}"; then
        log_error "Failed to install Firefox ESR"
        return 1
    fi

    log_success "Firefox ESR browser installed"
    return 0
}

# Main function to install all desktop required applications
# Returns: 0 on success, 1 on failure
install_desktop_required_applications() {
    log_info "Starting desktop required applications installation..."

    # Update package cache first
    if ! update_package_cache; then
        log_error "Failed to update package cache"
        return 1
    fi

    # Setup Flatpak (required for desktop environment)
    if ! setup_flatpak_desktop; then
        log_error "Failed to setup Flatpak desktop environment"
        return 1
    fi

    # Install GNOME essentials
    if ! install_gnome_essentials; then
        log_error "Failed to install GNOME essentials"
        return 1
    fi

    # Install Alacritty terminal
    if ! install_alacritty; then
        log_error "Failed to install Alacritty"
        return 1
    fi

    # Install system fonts
    if ! install_system_fonts; then
        log_error "Failed to install system fonts"
        return 1
    fi

    # Install clipboard utilities
    if ! install_clipboard_utilities; then
        log_error "Failed to install clipboard utilities"
        return 1
    fi

    # Install browser
    if ! install_browser; then
        log_error "Failed to install browser"
        return 1
    fi

    log_success "Desktop required applications installation complete"
    return 0
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_desktop_required_applications
fi
