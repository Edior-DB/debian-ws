#!/bin/bash
# Optional Desktop Productivity Applications
# Description: Installs optional productivity applications using Flatpak-first strategy
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../../../lib/core/logging.sh"
source "$(dirname "$0")/../../../lib/install/flatpak.sh"

# Install LibreOffice
# Returns: 0 on success, 1 on failure
install_libreoffice() {
    log_info "Installing LibreOffice..."

    local app_id="org.libreoffice.LibreOffice"
    local app_name="LibreOffice"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install LibreOffice"
        return 1
    fi

    log_success "LibreOffice installed"
    return 0
}

# Install Obsidian
# Returns: 0 on success, 1 on failure
install_obsidian() {
    log_info "Installing Obsidian..."

    local app_id="md.obsidian.Obsidian"
    local app_name="Obsidian"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Obsidian"
        return 1
    fi

    log_success "Obsidian installed"
    return 0
}

# Install Signal Desktop
# Returns: 0 on success, 1 on failure
install_signal() {
    log_info "Installing Signal Desktop..."

    local app_id="org.signal.Signal"
    local app_name="Signal"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Signal"
        return 1
    fi

    log_success "Signal Desktop installed"
    return 0
}

# Install 1Password
# Returns: 0 on success, 1 on failure
install_1password() {
    log_info "Installing 1Password..."

    local app_id="com.1password.1Password"
    local app_name="1Password"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install 1Password"
        return 1
    fi

    log_success "1Password installed"
    return 0
}

# Install Dropbox
# Returns: 0 on success, 1 on failure
install_dropbox() {
    log_info "Installing Dropbox..."

    local app_id="com.dropbox.Client"
    local app_name="Dropbox"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Dropbox"
        return 1
    fi

    log_success "Dropbox installed"
    return 0
}

# Install Zoom
# Returns: 0 on success, 1 on failure
install_zoom() {
    log_info "Installing Zoom..."

    local app_id="us.zoom.Zoom"
    local app_name="Zoom"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Zoom"
        return 1
    fi

    log_success "Zoom installed"
    return 0
}

# Main function to install productivity applications
# Returns: 0 on success, 1 on failure
install_productivity_applications() {
    log_info "Starting productivity applications installation..."

    # Ensure Flatpak is set up
    if ! setup_flatpak; then
        log_error "Failed to setup Flatpak"
        return 1
    fi

    local apps=(
        "libreoffice:LibreOffice Office Suite"
        "obsidian:Obsidian Knowledge Management"
        "signal:Signal Secure Messaging"
        "1password:1Password Password Manager"
        "dropbox:Dropbox Cloud Storage"
        "zoom:Zoom Video Conferencing"
    )

    log_info "Available productivity applications:"
    for i in "${!apps[@]}"; do
        local app_info="${apps[$i]}"
        local app_key="${app_info%%:*}"
        local app_desc="${app_info#*:}"
        echo "  $((i+1)). $app_desc"
    done

    echo
    read -p "Enter numbers of applications to install (e.g., 1,3,5 or 'all' for all): " selection

    if [[ "$selection" == "all" ]]; then
        # Install all applications
        local failed=0
        for app_info in "${apps[@]}"; do
            local app_key="${app_info%%:*}"
            local app_func="install_$app_key"

            if ! "$app_func"; then
                log_error "Failed to install $app_key"
                ((failed++))
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed productivity applications failed to install"
            return 1
        fi
    else
        # Install selected applications
        IFS=',' read -ra selected <<< "$selection"
        local failed=0

        for num in "${selected[@]}"; do
            # Remove whitespace
            num="${num// /}"

            if [[ "$num" =~ ^[0-9]+$ ]] && [[ $num -ge 1 ]] && [[ $num -le ${#apps[@]} ]]; then
                local app_info="${apps[$((num-1))]}"
                local app_key="${app_info%%:*}"
                local app_func="install_$app_key"

                if ! "$app_func"; then
                    log_error "Failed to install $app_key"
                    ((failed++))
                fi
            else
                log_warning "Invalid selection: $num"
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed productivity applications failed to install"
            return 1
        fi
    fi

    log_success "Productivity applications installation complete"
    return 0
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_productivity_applications
fi
