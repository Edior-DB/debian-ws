#!/bin/bash
# Optional Desktop Gaming & Entertainment Applications
# Description: Installs optional gaming and entertainment applications using Flatpak-first strategy
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../../../lib/core/logging.sh"
source "$(dirname "$0")/../../../lib/install/flatpak.sh"

# Install Steam
# Returns: 0 on success, 1 on failure
install_steam() {
    log_info "Installing Steam..."

    local app_id="com.valvesoftware.Steam"
    local app_name="Steam"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Steam"
        return 1
    fi

    log_success "Steam installed"
    return 0
}

# Install RetroArch
# Returns: 0 on success, 1 on failure
install_retroarch() {
    log_info "Installing RetroArch..."

    local app_id="org.libretro.RetroArch"
    local app_name="RetroArch"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install RetroArch"
        return 1
    fi

    log_success "RetroArch installed"
    return 0
}

# Install Minecraft (Official Launcher)
# Returns: 0 on success, 1 on failure
install_minecraft() {
    log_info "Installing Minecraft..."

    # Use PrismLauncher as it's available on Flathub
    local app_id="org.prismlauncher.PrismLauncher"
    local app_name="PrismLauncher (Minecraft)"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install PrismLauncher"
        return 1
    fi

    log_success "PrismLauncher (Minecraft) installed"
    return 0
}

# Install Discord
# Returns: 0 on success, 1 on failure
install_discord() {
    log_info "Installing Discord..."

    local app_id="com.discordapp.Discord"
    local app_name="Discord"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Discord"
        return 1
    fi

    log_success "Discord installed"
    return 0
}

# Main function to install gaming and entertainment applications
# Returns: 0 on success, 1 on failure
install_gaming_applications() {
    log_info "Starting gaming & entertainment applications installation..."

    # Ensure Flatpak is set up
    if ! setup_flatpak; then
        log_error "Failed to setup Flatpak"
        return 1
    fi

    local apps=(
        "steam:Steam Gaming Platform"
        "retroarch:RetroArch Emulation"
        "minecraft:PrismLauncher (Minecraft)"
        "discord:Discord Voice & Text Chat"
    )

    log_info "Available gaming & entertainment applications:"
    for i in "${!apps[@]}"; do
        local app_info="${apps[$i]}"
        local app_key="${app_info%%:*}"
        local app_desc="${app_info#*:}"
        echo "  $((i+1)). $app_desc"
    done

    echo
    read -p "Enter numbers of applications to install (e.g., 1,3,5 or 'all' for all): " selection

    if [[ "$selection" == "all" ]]; then
        # Install all applications
        local failed=0
        for app_info in "${apps[@]}"; do
            local app_key="${app_info%%:*}"
            local app_func="install_$app_key"

            if ! "$app_func"; then
                log_error "Failed to install $app_key"
                ((failed++))
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed gaming applications failed to install"
            return 1
        fi
    else
        # Install selected applications
        IFS=',' read -ra selected <<< "$selection"
        local failed=0

        for num in "${selected[@]}"; do
            # Remove whitespace
            num="${num// /}"

            if [[ "$num" =~ ^[0-9]+$ ]] && [[ $num -ge 1 ]] && [[ $num -le ${#apps[@]} ]]; then
                local app_info="${apps[$((num-1))]}"
                local app_key="${app_info%%:*}"
                local app_func="install_$app_key"

                if ! "$app_func"; then
                    log_error "Failed to install $app_key"
                    ((failed++))
                fi
            else
                log_warning "Invalid selection: $num"
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed gaming applications failed to install"
            return 1
        fi
    fi

    log_success "Gaming & entertainment applications installation complete"
    return 0
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_gaming_applications
fi
