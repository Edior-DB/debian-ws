#!/bin/bash
# Optional Desktop Multimedia Applications
# Description: Installs optional multimedia applications using Flatpak-first strategy
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../../../lib/core/logging.sh"
source "$(dirname "$0")/../../../lib/install/flatpak.sh"

# Install VLC Media Player
# Returns: 0 on success, 1 on failure
install_vlc() {
    log_info "Installing VLC Media Player..."

    local app_id="org.videolan.VLC"
    local app_name="VLC Media Player"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install VLC Media Player"
        return 1
    fi

    log_success "VLC Media Player installed"
    return 0
}

# Install GIMP Image Editor
# Returns: 0 on success, 1 on failure
install_gimp() {
    log_info "Installing GIMP Image Editor..."

    local app_id="org.gimp.GIMP"
    local app_name="GIMP"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install GIMP"
        return 1
    fi

    log_success "GIMP Image Editor installed"
    return 0
}

# Install Audacity Audio Editor
# Returns: 0 on success, 1 on failure
install_audacity() {
    log_info "Installing Audacity Audio Editor..."

    local app_id="org.audacityteam.Audacity"
    local app_name="Audacity"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Audacity"
        return 1
    fi

    log_success "Audacity Audio Editor installed"
    return 0
}

# Install OBS Studio
# Returns: 0 on success, 1 on failure
install_obs_studio() {
    log_info "Installing OBS Studio..."

    local app_id="com.obsproject.Studio"
    local app_name="OBS Studio"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install OBS Studio"
        return 1
    fi

    log_success "OBS Studio installed"
    return 0
}

# Install Spotify
# Returns: 0 on success, 1 on failure
install_spotify() {
    log_info "Installing Spotify..."

    local app_id="com.spotify.Client"
    local app_name="Spotify"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Spotify"
        return 1
    fi

    log_success "Spotify installed"
    return 0
}

# Install Pinta Image Editor
# Returns: 0 on success, 1 on failure
install_pinta() {
    log_info "Installing Pinta Image Editor..."

    local app_id="com.github.PintaProject.Pinta"
    local app_name="Pinta"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Pinta"
        return 1
    fi

    log_success "Pinta Image Editor installed"
    return 0
}

# Install Flameshot Screenshot Tool
# Returns: 0 on success, 1 on failure
install_flameshot() {
    log_info "Installing Flameshot Screenshot Tool..."

    local app_id="org.flameshot.Flameshot"
    local app_name="Flameshot"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install Flameshot"
        return 1
    fi

    log_success "Flameshot Screenshot Tool installed"
    return 0
}

# Main function to install multimedia applications
# Returns: 0 on success, 1 on failure
install_multimedia_applications() {
    log_info "Starting multimedia applications installation..."

    # Ensure Flatpak is set up
    if ! setup_flatpak; then
        log_error "Failed to setup Flatpak"
        return 1
    fi

    local apps=(
        "vlc:VLC Media Player"
        "gimp:GIMP Image Editor"
        "audacity:Audacity Audio Editor"
        "obs-studio:OBS Studio"
        "spotify:Spotify"
        "pinta:Pinta Image Editor"
        "flameshot:Flameshot Screenshot Tool"
    )

    log_info "Available multimedia applications:"
    for i in "${!apps[@]}"; do
        local app_info="${apps[$i]}"
        local app_key="${app_info%%:*}"
        local app_desc="${app_info#*:}"
        echo "  $((i+1)). $app_desc"
    done

    echo
    read -p "Enter numbers of applications to install (e.g., 1,3,5 or 'all' for all): " selection

    if [[ "$selection" == "all" ]]; then
        # Install all applications
        local failed=0
        for app_info in "${apps[@]}"; do
            local app_key="${app_info%%:*}"
            local app_func="install_${app_key//-/_}"

            if ! "$app_func"; then
                log_error "Failed to install $app_key"
                ((failed++))
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed multimedia applications failed to install"
            return 1
        fi
    else
        # Install selected applications
        IFS=',' read -ra selected <<< "$selection"
        local failed=0

        for num in "${selected[@]}"; do
            # Remove whitespace
            num="${num// /}"

            if [[ "$num" =~ ^[0-9]+$ ]] && [[ $num -ge 1 ]] && [[ $num -le ${#apps[@]} ]]; then
                local app_info="${apps[$((num-1))]}"
                local app_key="${app_info%%:*}"
                local app_func="install_${app_key//-/_}"

                if ! "$app_func"; then
                    log_error "Failed to install $app_key"
                    ((failed++))
                fi
            else
                log_warning "Invalid selection: $num"
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed multimedia applications failed to install"
            return 1
        fi
    fi

    log_success "Multimedia applications installation complete"
    return 0
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_multimedia_applications
fi
