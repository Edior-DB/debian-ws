#!/bin/bash
# Optional Desktop Development Applications
# Description: Installs optional development applications using Flatpak-first strategy
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
source "$(dirname "$0")/../../../lib/core/logging.sh"
source "$(dirname "$0")/../../../lib/install/flatpak.sh"
source "$(dirname "$0")/../../../lib/install/apt.sh"

# Install Visual Studio Code
# Returns: 0 on success, 1 on failure
install_vscode() {
    log_info "Installing Visual Studio Code..."

    # VSCode has specific installation requirements, use APT with Microsoft repository
    log_info "Setting up Microsoft repository for VSCode..."

    # Install prerequisites
    local prereqs=("wget" "gpg")
    if ! install_packages "${prereqs[@]}"; then
        log_error "Failed to install prerequisites for VSCode"
        return 1
    fi

    # Add Microsoft GPG key
    if ! add_gpg_key "https://packages.microsoft.com/keys/microsoft.asc" "packages.microsoft.gpg"; then
        log_error "Failed to add Microsoft GPG key"
        return 1
    fi

    # Add VSCode repository
    local repo_line="deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"
    if ! add_repository "$repo_line" "vscode"; then
        log_error "Failed to add VSCode repository"
        return 1
    fi

    # Update package cache
    if ! update_package_cache; then
        log_error "Failed to update package cache"
        return 1
    fi

    # Install VSCode
    if ! install_package "code"; then
        log_error "Failed to install VSCode"
        return 1
    fi

    log_success "Visual Studio Code installed"
    return 0
}

# Install VSCodium (Open Source version)
# Returns: 0 on success, 1 on failure
install_vscodium() {
    log_info "Installing VSCodium..."

    local app_id="com.vscodium.codium"
    local app_name="VSCodium"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install VSCodium"
        return 1
    fi

    log_success "VSCodium installed"
    return 0
}

# Install Cursor AI Editor
# Returns: 0 on success, 1 on failure
install_cursor() {
    log_info "Installing Cursor AI Editor..."

    # Cursor is not available on Flathub, use manual installation
    log_info "Downloading Cursor from official website..."

    local temp_dir="/tmp/cursor-$$"
    mkdir -p "$temp_dir"
    cd "$temp_dir"

    # Download latest Cursor AppImage
    local cursor_url="https://download.todesktop.com/200315glz3gpqo4/Cursor-0.44.7-x86_64.AppImage"

    if ! wget -O cursor.appimage "$cursor_url"; then
        log_error "Failed to download Cursor"
        cd - > /dev/null
        rm -rf "$temp_dir"
        return 1
    fi

    # Make executable and install
    chmod +x cursor.appimage
    mkdir -p "$HOME/.local/bin"
    mv cursor.appimage "$HOME/.local/bin/cursor"

    # Create desktop entry
    mkdir -p "$HOME/.local/share/applications"
    cat > "$HOME/.local/share/applications/cursor.desktop" << EOF
[Desktop Entry]
Name=Cursor
Comment=AI-powered code editor
Exec=$HOME/.local/bin/cursor
Icon=cursor
Type=Application
Categories=Development;TextEditor;
EOF

    cd - > /dev/null
    rm -rf "$temp_dir"

    log_success "Cursor AI Editor installed"
    return 0
}

# Install Zed Editor
# Returns: 0 on success, 1 on failure
install_zed() {
    log_info "Installing Zed Editor..."

    # Zed installation via script
    log_info "Downloading Zed from official installer..."

    if ! curl -f https://zed.dev/install.sh | sh; then
        log_error "Failed to install Zed Editor"
        return 1
    fi

    log_success "Zed Editor installed"
    return 0
}

# Install JetBrains RubyMine
# Returns: 0 on success, 1 on failure
install_rubymine() {
    log_info "Installing JetBrains RubyMine..."

    local app_id="com.jetbrains.RubyMine"
    local app_name="RubyMine"

    if ! install_optional_desktop_application "$app_id" "$app_name"; then
        log_error "Failed to install RubyMine"
        return 1
    fi

    log_success "JetBrains RubyMine installed"
    return 0
}

# Install Windsurf Editor
# Returns: 0 on success, 1 on failure
install_windsurf() {
    log_info "Installing Windsurf Editor..."

    # Windsurf is not widely available on Flatpak, skip or use manual installation
    log_warning "Windsurf installation not implemented - not available on Flatpak"
    return 0
}

# Main function to install development applications
# Returns: 0 on success, 1 on failure
install_development_applications() {
    log_info "Starting development applications installation..."

    # Ensure Flatpak is set up
    if ! setup_flatpak; then
        log_error "Failed to setup Flatpak"
        return 1
    fi

    local apps=(
        "vscode:Visual Studio Code"
        "vscodium:VSCodium (Open Source)"
        "cursor:Cursor AI Editor"
        "zed:Zed Editor"
        "rubymine:JetBrains RubyMine"
    )

    log_info "Available development applications:"
    for i in "${!apps[@]}"; do
        local app_info="${apps[$i]}"
        local app_key="${app_info%%:*}"
        local app_desc="${app_info#*:}"
        echo "  $((i+1)). $app_desc"
    done

    echo
    read -p "Enter numbers of applications to install (e.g., 1,3,5 or 'all' for all): " selection

    if [[ "$selection" == "all" ]]; then
        # Install all applications
        local failed=0
        for app_info in "${apps[@]}"; do
            local app_key="${app_info%%:*}"
            local app_func="install_$app_key"

            if ! "$app_func"; then
                log_error "Failed to install $app_key"
                ((failed++))
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed development applications failed to install"
            return 1
        fi
    else
        # Install selected applications
        IFS=',' read -ra selected <<< "$selection"
        local failed=0

        for num in "${selected[@]}"; do
            # Remove whitespace
            num="${num// /}"

            if [[ "$num" =~ ^[0-9]+$ ]] && [[ $num -ge 1 ]] && [[ $num -le ${#apps[@]} ]]; then
                local app_info="${apps[$((num-1))]}"
                local app_key="${app_info%%:*}"
                local app_func="install_$app_key"

                if ! "$app_func"; then
                    log_error "Failed to install $app_key"
                    ((failed++))
                fi
            else
                log_warning "Invalid selection: $num"
            fi
        done

        if [[ $failed -gt 0 ]]; then
            log_warning "$failed development applications failed to install"
            return 1
        fi
    fi

    log_success "Development applications installation complete"
    return 0
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    install_development_applications
fi
