#!/bin/bash
# Debian-WS Main Entry Point
# Description: Interactive installer for Debian workstation setup
# Author: Generated by GitHub Copilot for Debian-WS

set -euo pipefail

# Source required dependencies
SCRIPT_DIR="$(dirname "$0")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

source "$PROJECT_ROOT/lib/core/logging.sh"
source "$PROJECT_ROOT/lib/core/common.sh"

# Display banner
show_banner() {
    local title="${1:-Debian Workstation Setup Tool}"
    echo "
██████╗ ███████╗██████╗ ██╗ █████╗ ███╗   ██║    ██╗    ██╗███████╗
██╔══██╗██╔════╝██╔══██╗██║██╔══██╗████╗  ██║    ██║    ██║██╔════╝
██║  ██║█████╗  ██████╔╝██║███████║██╔██╗ ██║    ██║ █╗ ██║███████╗
██║  ██║██╔══╝  ██╔══██╗██║██╔══██║██║╚██╗██║    ██║███╗██║╚════██║
██████╔╝███████╗██████╔╝██║██║  ██║██║ ╚████║    ╚███╔███╔╝███████║
╚═════╝ ╚══════╝╚═════╝ ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝     ╚══╝╚══╝ ╚══════╝
"
    echo "$title"
    echo "=============================="
    echo
}

# Check system compatibility
check_system_compatibility() {
    log_info "Checking system compatibility..."

    # Check for Debian/Ubuntu system
    if ! check_debian_system; then
        return 1
    fi

    # Check for GNOME desktop environment
    if ! check_gnome_desktop; then
        if ! confirm_action "Continue anyway?"; then
            return 1
        fi
    fi

    # Check for sudo access
    if ! check_sudo_privileges; then
        return 1
    fi

    # Check internet connection
    if ! check_internet; then
        if ! confirm_action "Continue without internet connection?"; then
            return 1
        fi
    fi

    log_success "System compatibility check passed"
    return 0
}# Install required system applications
install_required_apps() {
    log_info "Starting required system applications installation..."

    if ! "$PROJECT_ROOT/install/system/install-required.sh"; then
        log_error "Failed to install required system applications"
        return 1
    fi

    log_success "Required system applications installation complete"
    return 0
}

# Install optional terminal applications
install_optional_terminal_apps() {
    log_info "Optional terminal applications installation..."
    log_warning "Terminal applications installation not yet implemented"
    echo "This feature will be available in a future version."
    return 0
}

# Install optional desktop applications
install_optional_desktop_apps() {
    log_info "Starting optional desktop applications installation..."

    if ! "$PROJECT_ROOT/install/apps/desktop/install-desktop-apps.sh"; then
        log_error "Failed to install optional desktop applications"
        return 1
    fi

    log_success "Optional desktop applications installation complete"
    return 0
}

# System configuration
configure_system() {
    log_info "System configuration..."
    log_warning "System configuration not yet implemented"
    echo "This feature will be available in a future version."
    return 0
}

# Update system
update_system() {
    log_info "Updating system packages..."

    # Update APT packages
    sudo apt update && sudo apt upgrade -y

    # Update Flatpak applications
    if command -v flatpak &> /dev/null; then
        log_info "Updating Flatpak applications..."
        flatpak update -y
    fi

    log_success "System update complete"
    return 0
}

# Show installation status
show_status() {
    echo "Installation Status:"
    echo "==================="
    echo

    # Check required terminal tools
    echo "Required Terminal Tools:"
    for tool in curl git unzip gum fastfetch; do
        if command -v "$tool" &> /dev/null; then
            echo "  ✓ $tool"
        else
            echo "  ✗ $tool"
        fi
    done
    echo

    # Check required desktop applications
    echo "Required Desktop Applications:"

    # Check Alacritty
    if command -v alacritty &> /dev/null || flatpak list | grep -q alacritty; then
        echo "  ✓ Alacritty"
    else
        echo "  ✗ Alacritty"
    fi

    # Check Firefox
    if command -v firefox-esr &> /dev/null; then
        echo "  ✓ Firefox ESR"
    else
        echo "  ✗ Firefox ESR"
    fi

    # Check GNOME Tweaks
    if command -v gnome-tweaks &> /dev/null; then
        echo "  ✓ GNOME Tweaks"
    else
        echo "  ✗ GNOME Tweaks"
    fi

    # Check Flatpak
    if command -v flatpak &> /dev/null; then
        echo "  ✓ Flatpak"
        local flatpak_count=$(flatpak list --app | wc -l)
        echo "    Installed apps: $flatpak_count"
    else
        echo "  ✗ Flatpak"
    fi

    echo
}

# Main function
main() {
    show_banner "Debian-WS Interactive Installer"

    # Check system compatibility
    if ! check_system_compatibility; then
        log_error "System compatibility check failed"
        exit 1
    fi

    local menu_options=(
        "Install Required System Applications"
        "Install Optional Terminal Applications"
        "Install Optional Desktop Applications"
        "System Configuration"
        "Update System"
        "Show Installation Status"
        "Exit"
    )

    while true; do
        echo
        log_info "Select an option:"

        local choice
        if command -v gum &> /dev/null; then
            choice=$(gum choose "${menu_options[@]}")
        else
            # Fallback without gum
            for i in "${!menu_options[@]}"; do
                echo "  $((i+1)). ${menu_options[$i]}"
            done
            echo
            read -p "Select option (1-7): " choice_num
            if [[ "$choice_num" =~ ^[1-7]$ ]]; then
                choice="${menu_options[$((choice_num-1))]}"
            else
                log_error "Invalid option: $choice_num"
                continue
            fi
        fi

        echo
        case "$choice" in
            "Install Required System Applications")
                install_required_apps
                ;;
            "Install Optional Terminal Applications")
                install_optional_terminal_apps
                ;;
            "Install Optional Desktop Applications")
                install_optional_desktop_apps
                ;;
            "System Configuration")
                configure_system
                ;;
            "Update System")
                update_system
                ;;
            "Show Installation Status")
                show_status
                ;;
            "Exit")
                log_info "Exiting Debian-WS installer"
                exit 0
                ;;
            *)
                log_error "Invalid option: $choice"
                ;;
        esac

        echo
        wait_for_input "Press Enter to continue..."
    done
}# Execute main function
main "$@"
